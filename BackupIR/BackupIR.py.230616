#!/usr/bin/env python
# part of this code is from FileExporter plugin
import json
import os
import sys
import glob
from ion.plugin import *
from subprocess import *
from django.utils.datastructures import SortedDict
import urllib2
import httplib2
import requests
import re

class BackupIR(IonPlugin):
	""" Plugin object which copy all desired IonReporter results file from the run into a folder."""
	""" A hierarchical filesystem is created (project->run->patients) to store the data, and files name are uniformly renamed"""
	version = "0.1"
	
	envDict = dict(os.environ)
	json_dat = {}
	renameString = ""
	barcodeNames = []
	sampleNameLookup = {} # dictionary allowing us to get the sample name associated with a particular barcode name
	isBarcodedRun = False
	runName = 'unknown'
	project = 'unknown'
	runPath = ''
        folder = '/media/PGM/results/IonReporter'
	
	# paths to the most recent, completed instance of the IonReporter uploader plugin
	#IRuploaderPath = False
        	
	def getBarcodeNameFromFileName(self, fileName):
		for testBarcode in self.barcodeNames:
			testBarcode2 = testBarcode + '_'
			if testBarcode2 in fileName:
				barcodeName = testBarcode
				return barcodeName
		
	def createOneFolderByPatient(self, bamFileList):
		for fileName in bamFileList:
			fileName = fileName.replace('./', '')
			barcodeName = self.getBarcodeNameFromFileName(fileName)
			try:
				patientName = self.sampleNameLookup[barcodeName]
				if not re.search("_RNA_",patientName,re.I): # 1 result per patient (DNA +RNA) under same folder named as DNA sample
					print 'CREATING FOLDER : %s -'%(patientName)
					# cmd = 'mkdir '+ self.folder + '/' + self.runPath + '/' + patientName
					# os.system(cmd)
					# print 'cmd %s' % cmd

					cmd = Popen(['mkdir', self.folder+'/'+self.runPath+'/'+patientName], stdout=PIPE)
					# cmd = Popen(['%s/backup_pgm.sh' % (self.envDict['DIRNAME']), 'mkdir', self.runPath + '/' + patientName], stdout=PIPE)
					out, err = cmd.communicate()
					print 'OUT: %s\nERR: %s'%(out, err)

					# get unfiltered zip, current tsv files paths and dowload them
					self.getSampleIRdata(patientName)
			except:
				'No name found for barcode'+ str(barcodeName)
                        
			
        def getSampleIRdata(self, sampleName):
            #get json file for sample
            jsonFile = '%s/%s/%s/%s.json' % (self.folder,self.runPath, sampleName, sampleName)
            #print 'Destination json file : %s' % jsonFile

	    #troubleshoot
            #cmd = 'curl -k -H "Authorization:YzdkYzM5MmFlZTg4NDJhMzBkODQ3ZWIwMzgyZmJkMmI0NzVhZDNmZjQzMTkzYjY1NDYyMDg5MzAwMGRiNGRkZg" "https://129.21.10.4/webservices_42/rest/api/analysis?format=json&name=%s &type=sample" > %s '%(sampleName,jsonFile)
	    #print 'cmd %s' % cmd

            print 'Get IR json for sample %s ' % sampleName   
            output = open(jsonFile,"w")
	    #!!!!!!!!!! TODO : changer car pas toujours v1, ex ROUBY_KZ492_v4 !!!!!!!!!
            url = "https://129.21.10.4/webservices_42/rest/api/analysis?format=json&name="+sampleName+"_v4&type=sample"
            cmd = Popen(['curl', '-k', '-H', "Authorization:YzdkYzM5MmFlZTg4NDJhMzBkODQ3ZWIwMzgyZmJkMmI0NzVhZDNmZjQzMTkzYjY1NDYyMDg5MzAwMGRiNGRkZg", url],stdout=output)
            out, err = cmd.communicate()
            print 'OUT: %s\nERR: %s'%(out, err)
            output.close()

            #get unfiltered variants  zip file for sample
            with open(jsonFile, 'r') as f:
		    #json_list = json.load(f)
		    json_IR = json.load(f,parse_float=str)
	    f.close()
	    print type(json_IR)
	    	    
	    status = False
	    analysis_name = False
	    #for data in json_IR:
		    #if isinstance(data['status'],dict):
		#	    status = data['status']
		 #   else:
	    #status = str(json_IR.get('status'))
	
	    status = json_IR[0]['status']
	    print 'status :' + status
	    if status == 'SUCCESSFUL':
		    print 'Get IR unfiltered.zip for sample %s ' % sampleName
		    # get zip url
		    zip_url = json_IR[0]['data_links']['unfiltered_variants']
		    zip_url.replace('\\','')
		    print 'unfiltered_variants url :'+zip_url

		    # upload IR unfiltered.zip for sample to torrent server
		    uploaded_path = '%s/%s/%s/%s_filtered.zip' % (self.folder,self.runPath, sampleName, sampleName)
		    #to troubleshoot
		    #cmd = 'curl -k -H "Authorization:YzdkYzM5MmFlZTg4NDJhMzBkODQ3ZWIwMzgyZmJkMmI0NzVhZDNmZjQzMTkzYjY1NDYyMDg5MzAwMGRiNGRkZg" "%s" -o %s '%(zip_url,uploaded_path)
		    #print 'cmd %s' % cmd

		    cmd = Popen(['curl', '-k', '-H', "Authorization:YzdkYzM5MmFlZTg4NDJhMzBkODQ3ZWIwMzgyZmJkMmI0NzVhZDNmZjQzMTkzYjY1NDYyMDg5MzAwMGRiNGRkZg", zip_url, '-o', uploaded_path])
		    out, err = cmd.communicate()
		    print 'OUT: %s\nERR: %s'%(out, err)

		    # get IR current tsv file for sample
		    print 'Get current result tsv file for sample %s ' % sampleName
		    zip_path = zip_url.split('=')[-1]
		    url_base = zip_url.split('=')[0]
		    #print url_base
		    #print zip_path
		    dirname = os.path.dirname(zip_path)
		    #print dirname
		    downloads_path = dirname +'/analysis_downloads/currentTsv/'
		    print downloads_path

		    tsv_dir_url = url_base+'='+downloads_path
		    print tsv_dir_url

		    output_path = '%s/%s/%s/' % (self.folder,self.runPath, sampleName)
		    print 'OUTPUT_PATH: %s -' % output_path
		    os.chdir(output_path)
		    list_files = output_path+'list.txt'
		    print 'FILE LIST : %s -' % list_files


		    # test httplib2
		    #print 'TEST HTTPLIB2'
		    #h = httplib2.Http(".cache")
		    #h.add_credentials("ionadmin","ionadmin")
		    #h_url = self.json_dat['runinfo']['api_url'] + '/v1/results?format=json&plugin__name=IonReporterUploader'
		    #h_url = tsv_dir_url
		    #print 'URL : %s' % tsv_dir_url
		    #resp, content = h.request(h_url,"GET")
		    #contentdict = json.loads(content)
		    #print 'CONTENT DICT'
		    #print contentdict

		    #cmd = 'wget --header=\"Authorization: token YzdkYzM5MmFlZTg4NDJhMzBkODQ3ZWIwMzgyZmJkMmI0NzVhZDNmZjQzMTkzYjY1NDYyMDg5MzAwMGRiNGRkZg\" --no-check-certificate -r %s -P %s' % (tsv_dir_url,output_path)
		    #cmd = 'curl -k -H "Authorization:YzdkYzM5MmFlZTg4NDJhMzBkODQ3ZWIwMzgyZmJkMmI0NzVhZDNmZjQzMTkzYjY1NDYyMDg5MzAwMGRiNGRkZg" %s/* -O'%(tsv_dir_url)
		    #cmd = 'scp -o ForwardAgent=yes -v -r ionadmin@129.21.10.4:'+downloads_path+' ionadmin@129.21.10.3:'+output_path+'/. | echo yes'

		    print 'CHANGE USER'
		    cmd = 'su - ionadmin | echo ionadmin'
		    print cmd
		    os.system(cmd)

		    print 'SCP SCP SCP SCP SCP'
		    
		    os.environ['SSH_TTY']='/dev/pts/0'
		    #cmd = 'sshpass -p \"ionadmin\" scp -v -r -i /home/ionadmin/.ssh/id_rsa ionadmin@129.21.10.4:'+downloads_path+' '+output_path+'/.'
		    cmd = 'scp -v -r ionadmin@129.21.10.4:'+downloads_path+' '+output_path+'/.'
		    print 'CMD SCP %s' % cmd
		    #cmd = 'rsync -v -r -z --password-file=/results/plugins/BackupIR/rsync_pass ionadmin@129.21.10.4:'+downloads_path+' '+output_path+'/.'
		    #print 'CMD RSYNC %s' % cmd
		    os.system(cmd)

		    #output = open(list_files,"w")
		    #cmd = 'curl -k -H -l "Authorization:YzdkYzM5MmFlZTg4NDJhMzBkODQ3ZWIwMzgyZmJkMmI0NzVhZDNmZjQzMTkzYjY1NDYyMDg5MzAwMGRiNGRkZg" %s/*'%(tsv_dir_url)
		    #cmd = Popen(['curl',  '-k', '-H', '--header', "Authorization:YzdkYzM5MmFlZTg4NDJhMzBkODQ3ZWIwMzgyZmJkMmI0NzVhZDNmZjQzMTkzYjY1NDYyMDg5MzAwMGRiNGRkZg", "accept:application/json;odata=verbose", tsv_dir_url],"GET",stdout=output)
		    #out, err = cmd.communicate()
		    #print 'OUT: %s\nERR: %s'%(out, err)
		    #output.close()
		    #with open(list_files,'r') as f :
		#	    f_content = f.read()
			#    print f_content
		    #f.close()

		    #print list_files

		    #out, err = cmd.communicate()
		    #print 'OUT: %s\nERR: %s'%(out, err)
		    #try:
			    #print 'TRY SCP'
			    #os.system(cmd)
			    #cmd = Popen(['wget', '--header="Authorization: token YzdkYzM5MmFlZTg4NDJhMzBkODQ3ZWIwMzgyZmJkMmI0NzVhZDNmZjQzMTkzYjY1NDYyMDg5MzAwMGRiNGRkZg"', '--no-check-certificate', '-r', tsv_dir_url, '-P', output_path ])
			    #cmd = Popen(['curl', '-k', '-H', "Authorization:YzdkYzM5MmFlZTg4NDJhMzBkODQ3ZWIwMzgyZmJkMmI0NzVhZDNmZjQzMTkzYjY1NDYyMDg5MzAwMGRiNGRkZg",tsv_dir_url+'/*.tsv', '-O'])
			    #cmd = Popen(['scp', '-o UserKnownHostsFile=.ssh/known_hosts', '-v', '-r', 'ionadmin@129.21.10.4:'+downloads_path, ' '+output_path+'/.'])
			    #cmd.stdin.write('ionadmin\n')
			    #cmd.stdin.flush()
			    #out, err = cmd.communicate()
			    #print 'OUT: %s\nERR: %s'%(out, err)
		    #except :
			    #'SCP FAIL !!!'
		    # recuperer le plus recent ou tous les fichiers 
		    # get analysis name
		    #analysis_name = json_IR[0]['name']
		    #print 'analysis :'+analysis_name	    
	    else :
		    print 'No IR uploader successfull instance found for sample '+sampleName

	def getPluginPath(self, pluginName):
		pluginPath = False
		try:
			api_url = self.json_dat['runinfo']['api_url'] + '/v1/pluginresult/?format=json&plugin__name=%s&result=%s' % (pluginName,str(self.json_dat['runinfo']['pk']))
			api_key = self.json_dat['runinfo'].get('api_key', None)
			if api_key is not None:
				api_url = api_url + '&api_key=%s' % api_key
				print 'Using API key: %s' % api_key
			else:
				print 'No API key available'
			f = urllib2.urlopen(api_url)
			d = json.loads(f.read())
			
			for plugin in d['objects']: # they are already sorted from newest to oldest, so take the first of this list which is 'completed'
				if plugin['state'] == 'Completed':
					pluginPath = plugin['path']
					pluginPath = pluginPath.split('/')[-1]
					break
			if not pluginPath:
				print 'WARNING! No completed instance found for plugin "%s"' % pluginName
		except:
			print 'ERROR!  Failed to get variant caller path'
		
		print 'INFO: using %s path: %s' % (pluginName,pluginPath)
		return pluginPath
		
       
	def launch(self):
		try:
			with open('startplugin.json', 'r') as fh:
				self.json_dat = json.load(fh)
		except:
			print 'Error reading plugin json.'
		
		try:
			htmlOut = open('%s/plugin_out/BackupIR_out/BackupIR_block.html'%self.envDict['ANALYSIS_DIR'], 'a+')
		except:
			htmlOut = open('BackupIR_block.html', 'w')
		htmlOut.write('<html><body>\n')

		if os.path.isfile(self.envDict['TSP_FILEPATH_BARCODE_TXT']):
			self.isBarcodedRun = True
			
		if not self.isBarcodedRun:
			print "This plugin only work for barcoded run. \n Exiting..."
			sys.exit(0)

                # get the project name.
		try:
			self.project = self.envDict['TSP_PROJECT']
		except:
			self.project = 'unknown'
			
		# get the run name.
		try:
			self.runName = self.envDict['TSP_ANALYSIS_NAME']
		except:
			self.runName = 'unknown'
		self.runPath = self.project + '/' + self.runName

                # creating folder of the project
		print 'CREATING FOLDER : %s -'%(self.project)
		cmd = Popen(['mkdir', self.folder+'/'+self.project], stdout=PIPE)
		out, err = cmd.communicate()
		print 'OUT: %s\nERR: %s'%(out, err)

                # creating folder of the run
		print 'CREATING FOLDER : %s -'%(self.runName)
		cmd = Popen(['mkdir', self.folder+'/'+self.runPath], stdout=PIPE)
		out, err = cmd.communicate()
		print 'OUT: %s\nERR: %s'%(out, err)

                #get IonReporter uploader path
                self.IRuploaderPath = self.getPluginPath("IonReporterUploader")
                htmlOut.write('&#8594; IonReporterUploader instance : <b>%s</b><br/>\n'%self.IRuploaderPath)
                if not self.IRuploaderPath:
                    IRuploader = False

		# test httplib2
		#print 'TEST HTTPLIB2'
		#h = httplib2.Http(".cache")
		#h.add_credentials("ionadmin","ionadmin")
		#h_url = self.json_dat['runinfo']['api_url'] + '/v1/results?format=json&plugin__name=IonReporterUploader'
		#resp, content = h.request(h_url,"GET")
		#contentdict = json.loads(content)
		#print 'CONTENT DICT'
		#print contentdict

                # Get bam filenames.
		with open(os.path.join(self.json_dat['runinfo']['basecaller_dir'], 'datasets_basecaller.json'), 'r') as f:
			json_basecaller = json.load(f)

                if isinstance(self.json_dat['plan']['barcodedSamples'],dict):
			samples = self.json_dat['plan']['barcodedSamples']
		else:
			samples = json.loads(self.json_dat['plan']['barcodedSamples'])

		bamPaths = []
		bams = []

                try:
			reference_path = self.envDict['TSP_FILEPATH_GENOME_FASTA']
		except:
			reference_path = ''

		for datum in json_basecaller['datasets']:
			if reference_path != '':
				tempPath = os.path.join(self.json_dat['runinfo']['alignment_dir'], datum['file_prefix']+'.bam')
			else:
				tempPath = os.path.join(self.json_dat['runinfo']['basecaller_dir'], datum['file_prefix']+'.basecaller.bam')
			print 'adding BAM: %s' % tempPath
			if os.path.exists(tempPath):
				bamPaths.append(tempPath)
				if datum['dataset_name'][datum['dataset_name'].rfind('/')+1:] != 'No_barcode_match' and '/' in datum['dataset_name']:
					bams.append(datum['dataset_name'])

		# get the list of 'valid' barcodes or samples (could be either depending on whether user altered names with run planning
		# and sort of hacky, but extract this from the BAM file names we just got above
		for bamFileName in bamPaths:
			barcodeName = bamFileName.split('/')[-1] # get the last part, just the name with no path (probably can use os method here too)
			barcodeName = barcodeName.split('_rawlib')[0] # get just the barcode part of the name
			# find a possible matching sample name
			for sampleItemName in samples:
				sampleItem = samples[sampleItemName]
				if barcodeName in sampleItem['barcodes']:
					self.sampleNameLookup[barcodeName] = sampleItemName
			if barcodeName in self.sampleNameLookup.keys():
				sampleName = self.sampleNameLookup[barcodeName]
				print 'BARCODE FOUND: %s SAMPLE ID: %s' % (barcodeName, sampleName)
				self.barcodeNames.append(barcodeName)
				 # Create patients folders
				print 'CREATING PATIENTS FOLDERS...'
				self.createOneFolderByPatient(bamPaths)
			else:
				sampleName = ''
				#self.sampleNameLookup[barcodeName] = '' # makes it much easier later to do the lookup with no conditional tests
			# MGD note: I considered setting blank sample names to the barcode name instead, but might not be what customer intended
			
		self.sampleNameLookup[''] = '' # allows us to easily handle case where barcode might not have been found

               

if __name__ == "__main__":
	PluginCLI(BackupIR())

