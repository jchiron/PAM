#!/usr/bin/env python
# Copyright (C) 2013 Ion Torrent Systems, Inc. All Rights Reserved

import sys
import os
import zipfile
import subprocess
import json
import time
import traceback
import re
import glob
import ast
from optparse import OptionParser
from django.conf import settings
from django.template.loader import render_to_string


# critical environment variables:
DIRNAME                     = '' # home directory for the plugin files
TSP_URLPATH_PLUGIN_DIR      = ''
startplugin_json            = {}

# File names generated by the plugin
BASENAME_VARIANTS_XLS       = 'variants.xls'
BASENAME_VARIANTS_VCF       = 'TSVC_variants.vcf'
BASENAME_PARAMETERS_JSON    = 'local_parameters.json'
HTML_BLOCK                  = 'variantCaller_block.html'    # Top report page block


def printtime(message, *args):
    if args:
        message = message % args
    print "[ " + time.strftime('%X') + " ] " + message
    sys.stdout.flush()
    sys.stderr.flush()


def run_command(command,description):
    printtime(' ')
    printtime('Task    : ' + description)
    printtime('Command : ' + command)
    printtime(' ')
    return subprocess.call(command,shell=True)


def execute_output(cmd):
    try:
        process = subprocess.Popen(cmd, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, shell=True)
        return process.communicate()[0]
    except:
        traceback.print_exc()
        return ''

def zipdir(path, ziph):
    # ziph is zipfile handle
    for root, dirs, files in os.walk(path):
        for file in files:
            ziph.write(os.path.join(root, file))

def plugin_main():
        
    #global PLUGIN_DEV_SKIP_VARIANT_CALLING    
    global DIRNAME
    global TSP_URLPATH_PLUGIN_DIR
    global startplugin_json

    global UCSC_GENOME_FASTA

    # script parameters
    parser = OptionParser()
    parser.add_option('-d', '--install-dir', help='Directory containing plugin files', dest='install_dir')
    parser.add_option('-o', '--output-dir', help='Directory for results files', dest='output_dir')
    parser.add_option('-r', '--report-dir', help='Directory containing analysis report files', dest='report_dir')
    parser.add_option('-s', '--sample-list', help='File containing barcode list', dest='sample_list')
    parser.add_option('-f', '--genome-fasta', help='Reference genome fasta file', dest='genome_fasta')
    #parser.add_option('-e', '--env-parameter', help='File containing environment variable for plugin execution', dest='env_file')
    parser.add_option('-u', '--output-url', help='URL matching the output directory', dest='output_url')
    (options, args) = parser.parse_args()

    DIRNAME                     = options.install_dir    #os.environ['DIRNAME']         # home directory for the plugin files
    TSP_FILEPATH_PLUGIN_DIR     = options.output_dir     #os.environ['TSP_FILEPATH_PLUGIN_DIR'] # target plugin results directory
    ANALYSIS_DIR                = options.report_dir     #os.environ['ANALYSIS_DIR'] # main report directory
    PGM_GENOME_FASTA            = options.genome_fasta
    TSP_FILEPATH_BARCODE_TXT    = options.sample_list
    #ENV_PARAMETER = options.env_file
    TSP_URLPATH_PLUGIN_DIR      = options.output_url

    #check which output format are selected 
    if os.environ['PLUGINCONFIG__VA_DIAG'] is not None:
        PLUGINCONFIG__VA_DIAG = os.environ['PLUGINCONFIG__VA_DIAG']
        #print 'Diag ' + PLUGINCONFIG__VA_DIAG #debug line
    else:
        PLUGINCONFIG__VA_DIAG ="False"
    if os.environ['PLUGINCONFIG__VA_SAFIR02'] is not None:
        PLUGINCONFIG__VA_SAFIR02 = os.environ['PLUGINCONFIG__VA_SAFIR02']
        #print 'Safir02 ' + PLUGINCONFIG__VA_SAFIR02 #debug line
    else:
        PLUGINCONFIG__VA_SAFIR02 ="False"

    #print ANALYSIS_DIR #debug line
    #print 'dirname ' + DIRNAME #debug line
    #print 'result plugin dir ' + TSP_FILEPATH_PLUGIN_DIR #debug line
    # variantCaller directory output where IonExpress00x folders are
    
    #tvc_output = os.path.join(ANALYSIS_DIR,'plugin_out/variantCaller_out')
    # new directory check below, adapting to version 4.0.2 of Torrent Server, allowing multiple plugins results directory. 

    ######################################################################################
    #read startplugin_json file, extract names associated with barcodes
    
    sample_name = {}

    try:
        json_file = open(os.path.join(ANALYSIS_DIR,'ion_params_00.json'), 'r')
        ion_params_json = json.load(json_file,parse_float=str)
        json_file.close()
    except:
        printtime('ERROR: Failed to load and parse ion_params_00.json')
        return 1
    
    #put results in a new dictionnary
        
    #~ barcodedSamples=ast.literal_eval(ion_params_json['experimentAnalysisSettings'].get('barcodedSamples'))
    barcodedSamples_fromJson = ion_params_json['experimentAnalysisSettings'].get('barcodedSamples')
    if isinstance(barcodedSamples_fromJson,dict):
        barcodedSamples = barcodedSamples_fromJson
    else:
        barcodedSamples=json.loads(ion_params_json['experimentAnalysisSettings'].get('barcodedSamples'))

    #go through the dictionnary and revert it to use the barcode as key, assuming there is only one barcode per samplesname
    for key in barcodedSamples:
        #barcode=barcodedSamples.get(key).get('barcodes')[0]
        #sample_name[barcode]=key
        all_barcodes= barcodedSamples.get(key).get('barcodes')
        all_barcodes_str = ','.join(all_barcodes)
        for bc in all_barcodes:
            #print 'barcode ' + bc 
            #nucType=barcodedSamples.get(key).get('barcodeSampleInfo').get(bc).get('nucleotideType')
            bc_info=barcodedSamples.get(key).get('barcodeSampleInfo').get(bc)
            #for keys,values in bc_info.items():
            #    print 'cle' + keys
            #    print 'valeurs' + values
            nucType=bc_info['nucleotideType']
            #print 'nucleotideType ' + nucType + '\n'
            if nucType == 'DNA' :
                barcode=bc
                sample_name[bc]=key
            
                #print '\n\n\n SAMPLE : ' + key + 'all barcodes : ' + all_barcodes_str + 'DNA barcode : ' + barcode
    
    tvc_directory = os.listdir(os.path.join(ANALYSIS_DIR,'plugin_out/'))
    #glob_results=glob.glob(os.path.join(ANALYSIS_DIR,'plugin_out/variantCaller*'))
    glob_results=glob.glob(os.path.join(ANALYSIS_DIR,'plugin_out/variantCaller_out.*'))
    if len(glob_results) > 1:
        highest_plugin_nb = 0
        for item in glob_results:
            plugin_nb = int(item.split('variantCaller_out.')[1])
            if plugin_nb > highest_plugin_nb:
                highest_plugin_nb=plugin_nb
                final_VC_plugin = item
    else:
        final_VC_plugin=glob_results[0]

    tvc_output = final_VC_plugin

    # retreive genome version to read genome parameter file
    regexp = ".*/(.*).fasta$"
    genome_id = re.match(regexp, PGM_GENOME_FASTA)
    #genome = genome_id.group(1)
    #print 'genome :'+ genome + '\n' #debug line
    if genome_id.group(1) is not None:
        if re.match("hg19", genome_id.group(1)):
            GENOME_PARAMETER = DIRNAME +"/conf/hg19.conf"

    # read genome parameter file and construct genome UCSC files path
    genome_parameter_file = open(GENOME_PARAMETER,'r')
    for line in genome_parameter_file:
        line = line.rstrip('\n')
        if line.startswith('UCSC_FASTA'):
            UCSC_GENOME_FASTA = line.split(',')[1]
        if line.startswith('UCSC_CHR_INFO'):
            UCSC_CHR_TAB_INFO = line.split(',')[1]

    # retreive env paramters to run Convert_Annotate_TorSer_VCF_V1.sh
    ENV_PARAMETER = DIRNAME + "/conf/plugin.conf" 
    #print 'conf file : ' + ENV_PARAMETER + '\n'
    env_parameter_file = open(ENV_PARAMETER,'r')

    #top block html file
    block_html_file = TSP_FILEPATH_PLUGIN_DIR + "/variantAnnotation_block.html"
    block_html=open(block_html_file,'w')
    block_content = "<!DOCTYPE html>\n" \
        "<html lang=\"en\">\n" \
        "<head>\n" \
        "<base target=\"_parent\"/>\n" \
        "<link rel=\"stylesheet\" media=\"all\" href=\"/site_media/resources/bootstrap/css/bootstrap.min.css\">\n" \
        "<link href=\"/site_media/resources/kendo/styles/kendo.common.min.css\" rel=\"stylesheet\">\n" \
        "<link href=\"/site_media/resources/less/kendo.tb.min.css\" rel=\"stylesheet\">\n" \
        "<link type=\"text/css\" rel=\"stylesheet\" href=\"/site_media/resources/styles/tb-styles.min.css\">\n" \
        "</head>\n\n" \
        "<body>\n" \
         "<div class=\"k-widget k-grid\">\n" \
         "<table class=\"table-striped\">\n" \
         "    <thead class=\"k-grid-header\">\n" \
         "      <tr>\n" \
         "        <th><span class=\"help\" title=\"Barcode name\">Barcode IonXpress ID</span></th>\n" \
         "        <th><span class=\"help\" title=\"Sample name\">Sample name</span></th>\n" \
         "        <th><span class=\"help\" title=\"Download Link\">Download link</span></th>\n"
    #add columns foreach output annotation format selected in plugin config
    if re.match("True",PLUGINCONFIG__VA_DIAG):
        block_content = block_content + "        <th><span class=\"help\" title=\"Download Link (Diag file)\">Download link (Diag)</span></th>\n" 
    if re.match("True",PLUGINCONFIG__VA_SAFIR02):
        block_content = block_content + "        <th><span class=\"help\" title=\"Download Link (Safir02 file)\">Download link (Safir02)</span></th>\n" 

    block_content = block_content + "      </tr>\n" \
            "    </thead>\n" \
            "    \n"

    block_html.write(block_content)
    block_html.close()

    for line in env_parameter_file:
        line = line.rstrip('\n')
        if line.startswith('DNASEQ_VARIANTS'):
            DNASEQ_VARIANTS = line.split('=')[1]
        if line.startswith('IonXpress_ANNOTATION'):
            IonXpress_ANNOTATION = line.split('=')[1]
        if line.startswith('ANNODB'):
            ANNODB = line.split('=')[1]
        if line.startswith('BCFDIR'):
            BCFDIR = line.split('=')[1]
        if line.startswith('SAMDIR'):
            SAMDIR = line.split('=')[1]

    # samples name and index list file
    bc_list_file = open(TSP_FILEPATH_BARCODE_TXT,'r')
    print '\n\n BARCODE LIST FILE : ' + TSP_FILEPATH_BARCODE_TXT + '\n\n\n'
    log=open("log.txt",'w')
    # samples_plan=open("samplesplan.txt",'w')
    cmd = ""

    for line in bc_list_file:
        #troubleshoot= 'barcode file list' + line
        #log.write(troubleshoot)
        if not line.startswith('barcode '):
            continue

        barcode_entry = {}
        barcode_entry['name'] = line.split(',')[1]
        #troubleshoot= 'Barcode: '+barcode_entry['name']
        #log.write(troubleshoot)
        #sample vcf (generated using variantCaller) file path
        barcode_entry['vcf'] = os.path.join(tvc_output, barcode_entry['name'] + '/TSVC_variants.vcf')
        #troubleshoot= 'VCF:'+barcode_entry['vcf']+'\n\n'
        #log.write(troubleshoot)
        barcode_entry['status'] = 'queued'
        #print barcode_entry['vcf'] + '\n'#debug line

        # non sequenced sample, do nothing
        if not os.path.exists(barcode_entry['vcf']):
            #troubleshoot=barcode_entry['vcf'] + 'no such file\n\n'
            #log.write(troubleshoot)
            continue

        # sequenced sample, add IonXpress id to samples_plan file 
        sample_id = barcode_entry['name']
        #print '\n\nSAMPLE ID : ' + sample_id +'\n\n\n' #debug line
        # samples_plan.write(sample_id + '\n')

        #sample with no name associated = possible contamination, don't annotate
        try:
            tmp_name = sample_name[sample_id]
            #troubleshoot= '\n\n TMP NAME : '+ tmp_name + '\n\n\n' #debug line
            #log.write(troubleshoot)
            #if sample_id == 'IonXpress_086':
            #    tmp_name = 'VIRELEGOUX_LN398'
            #    print '\n\n TMP NAME : '+ tmp_name + '\n\n\n' #debug line
            #elif sample_id == 'IonSelect-15':
            #    tmp_name = 'MAHAGNE_LK891'
            #    print '\n\n TMP NAME : '+ tmp_name + '\n\n\n' #debug line
            #elif sample_id == 'IonSelect-10':
            #    tmp_name = 'none'
            #    print '\n\n TMP NAME : '+ tmp_name + '\n\n\n' #debug line
        except KeyError:
            #key is not present : may be 1-contamination or 2-omitted sample name in plan
            #case 1 : don't anotate
            #case 2 : change sample plan in torrent browser and redo analysis before annotation
            #if sample_id == 'IonXpress_086':
            #    tmp_name = 'VIRELEGOUX_LN398'
            #    print '\n\n TMP NAME : '+ tmp_name + '\n\n\n' #debug line
            #elif sample_id == 'IonSelect-15':
            #    tmp_name = 'MAHAGNE_LK891'
            #    print '\n\n TMP NAME : '+ tmp_name + '\n\n\n' #debug line
            #elif sample_id == 'IonSelect-10':
            #    tmp_name = 'none'
            #    print '\n\n TMP NAME : '+ tmp_name + '\n\n\n' #debug line
            #else :
            continue

        #if sample_id == 'IonSelect-1':
        #    tmp_name = 'GOURMELON_LK488'
        #    print '\n\n TMP NAME : '+ tmp_name + '\n\n\n' #debug line
        #elif sample_id == 'IonSelect-5':
        #    tmp_name = 'JEAN_LL332'
        #    print '\n\n TMP NAME : '+ tmp_name + '\n\n\n' #debug line
        #elif sample_id == 'IonSelect-7':
        #    tmp_name = 'DARCOS_LL929'
        #    print '\n\n TMP NAME : '+ tmp_name + '\n\n\n' #debug line
                
        sample_id_txt = os.path.join(TSP_FILEPATH_PLUGIN_DIR,sample_id + '.txt')
        sample_plan=open(sample_id_txt,'w')
        sample_plan.write("Header \n" + sample_id)
        sample_plan.close()
        
        sample_id_chr = TSP_FILEPATH_PLUGIN_DIR + "/" + sample_id + "/CHR"

        # annotation script execution
        # need to escape the sample_name[sample_id] variable (can include space)
        
        cmd = "bash /results/tools/IonXpress_VCF_conversion_2014_07_04/Convert_Annotate_TorSer_VCF.V1.sh -P " + tvc_output +\
            " -L " + sample_id_txt +\
            " -S " + sample_id +\
            " -N \"" + sample_name[sample_id] +"\""\
            " -A " + TSP_FILEPATH_PLUGIN_DIR +\
            " -B " + BCFDIR +\
            " -U " + UCSC_GENOME_FASTA + " -X no -C yes" +\
            " -O " + sample_id_chr +\
            " -D " + DNASEQ_VARIANTS +\
            " -I " + IonXpress_ANNOTATION +\
            " -T " + UCSC_CHR_TAB_INFO +\
            " -V " + ANNODB +"\n"
        
        #cmd = "bash /results/tools/IonXpress_VCF_conversion_2014_07_04/Convert_Annotate_TorSer_VCF.V1.sh -P " + tvc_output +\
        #    " -L " + sample_id_txt +\
        #    " -S " + sample_id +\
        #    " -N \"" + tmp_name +"\""\
        #    " -A " + TSP_FILEPATH_PLUGIN_DIR +\
        #    " -B " + BCFDIR +\
        #    " -U " + UCSC_GENOME_FASTA + " -X no -C yes" +\
        #    " -O " + sample_id_chr +\
        #    " -D " + DNASEQ_VARIANTS +\
        #    " -I " + IonXpress_ANNOTATION +\
        #    " -T " + UCSC_CHR_TAB_INFO +\
        #    " -V " + ANNODB +"\n"

        log.write(cmd)
        os.system(cmd)
    
    log.close()
    
    if re.match("True",PLUGINCONFIG__VA_SAFIR02):
        zipf = zipfile.ZipFile('safir02.zip', 'w')
        zipdir('safir02/', zipf)
        zipf.close()

        block_html=open(block_html_file,'a')
        block_html.write("<tr><td colspan=4><a class=\"btn\" href=\"safir02.zip\">safir02 zip file</a></td></tr>")
        block_content = "</table>\n</div>\n\n</body>\n</html>\n" 
        block_html.write(block_content)
        block_html.close()

    return 0

if __name__ == "__main__":
    
    exit(plugin_main())
